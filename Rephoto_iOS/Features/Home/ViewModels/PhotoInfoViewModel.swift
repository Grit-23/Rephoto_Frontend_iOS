//
//  PhotoInfoViewModel.swift
//  Rephoto_iOS
//
//  Created by ÍπÄÎèÑÏó∞ on 7/14/25.
//

import SwiftUI
import Moya
import Observation

@Observable
class PhotoInfoViewModel {
    private let photoProvider = MoyaProvider<PhotosAPITarget>()
    private let provider = MoyaProvider<TagAPITarget>()
    private let descriptionProvider = MoyaProvider<DescriptionAPITarget>()
    
    var isDeleted: Bool = false
    var tags: [TagResponseDto] = []   // ‚úÖ PhotoInfoView Ï†ÑÏö© ÌÉúÍ∑∏ Î¶¨Ïä§Ìä∏
    var description: String = ""
    
    // ÏÇ¨ÏßÑ ÏÇ≠Ï†ú
    func deletePhoto(photoId: Int) {
        photoProvider.request(.deletePhoto(photoId: photoId)) { result in
            switch result {
            case .success(let response):
                if (200..<300).contains(response.statusCode) {
                    DispatchQueue.main.async {
                        self.isDeleted = true
                    }
                } else {
                    print("‚ùå failed delete status code:", response.statusCode)
                }
            case .failure(let error):
                print("‚ùå network error:", error)
            }
        }
    }
    
    // ÌÉúÍ∑∏ Î™©Î°ù Ï°∞Ìöå
    func fetchTags(photoId: Int) {
        provider.request(.getTags(photoId: photoId)) { result in
            switch result {
            case .success(let response):
                do {
                    let dtos = try JSONDecoder().decode([TagResponseDto].self, from: response.data)
                    DispatchQueue.main.async {
                        self.tags = dtos
                    }
                } catch {
                    print("‚ùå decode error:", error)
                    if let raw = String(data: response.data, encoding: .utf8) {
                        print("üìÑ raw response:", raw) // Ïã§Ï†ú ÏùëÎãµ ÌôïÏù∏
                    }
                }
            case .failure(let error):
                print("‚ùå network error:", error)
            }
        }
    }

    
    // ÌÉúÍ∑∏ ÏàòÏ†ï
    func updateTag(photoTagId: Int, newTagName: String) {
        guard let index = tags.firstIndex(where: { $0.photoTagId == photoTagId }) else { return }
        let oldTag = tags[index]

        // Optimistic UI
        tags[index] = TagResponseDto(
            photoTagId: oldTag.photoTagId,
            tagId: oldTag.tagId,
            tagName: newTagName,
            photoId: oldTag.photoId
        )

        let request = TagRequestDto(tagName: newTagName)
        provider.request(.updateTag(photoTagId: photoTagId, tagName: request.tagName)) { result in
            switch result {
            case .success(let response):
                do {
                    let dtos = try JSONDecoder().decode(TagResponseDto.self, from: response.data) // ‚úÖ Î∞∞Ïó¥ ÎîîÏΩîÎî©
                    DispatchQueue.main.async {
                        self.tags[index] = dtos   // ÏÑúÎ≤ÑÍ∞Ä ÎÇ¥Î†§Ï§Ä ÏµúÏã† Î¶¨Ïä§Ìä∏ Ï†ÑÏ≤¥Î°ú ÍµêÏ≤¥
                    }
                } catch {
                    print("‚ùå decode error:", error)
                }
            case .failure(let error):
                print("‚ùå network error:", error)
                DispatchQueue.main.async { self.tags[index] = oldTag }
            }
        }
    }
    
    // ÌÉúÍ∑∏ Ï∂îÍ∞Ä
    func addTag(photoId: Int, tagName: String) {
        provider.request(.addTag(photoId: photoId, tagName: tagName)) { result in
            switch result {
            case .success(let response):
                do {
                    let dto = try JSONDecoder().decode(TagResponseDto.self, from: response.data) // ‚úÖ Î∞∞Ïó¥ ÎîîÏΩîÎî©
                    DispatchQueue.main.async {
                        self.tags.append(dto)
                    }
                } catch {
                    print("‚ùå decode error:", error)
                }
            case .failure(let error):
                print("‚ùå network error:", error)
            }
        }
    }
    
    func getDescription(photoId: Int) {
        descriptionProvider.request(.description(photoId: photoId)) { result in
            switch result {
            case .success(let response):
                do {
                    let text = try response.mapString().trimmingCharacters(in: .whitespacesAndNewlines)
                    DispatchQueue.main.async {
                        self.description = text
                    }
                } catch {
                    print("‚ùå decode error:", error)
                }
            case .failure(let error):
                print("‚ùå network error:", error)
            }
        }
    }
}
